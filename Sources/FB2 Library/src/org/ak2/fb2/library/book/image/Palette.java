package org.ak2.fb2.library.book.image;

public class Palette {

    public byte B[];

    public byte G[];

    public byte R[];

    private Palette() {
        B = new byte[256];
        G = new byte[256];
        R = new byte[256];
    }

    public static Palette getMSVGAPalette() {
        final Palette pal = new Palette();
        pal.R = pal.msvgar;
        pal.G = pal.msvgag;
        pal.B = pal.msvgab;
        return pal;
    }

    public static Palette getRainbowPalette() {
        final Palette pal = new Palette();
        int Loop;

        for (Loop = 0; Loop <= 42; ++Loop) {
            pal.R[Loop] = (byte) 255;
            pal.G[Loop] = (byte) (Loop * 127 / 42);
            pal.B[Loop] = 0;
        }
        for (Loop = 43; Loop <= 84; ++Loop) {
            pal.R[Loop] = (byte) 255;
            pal.G[Loop] = (byte) (127 + (Loop - 43) * 128 / 41);
            pal.B[Loop] = 0;
        }
        for (Loop = 85; Loop <= 126; ++Loop) {
            pal.R[Loop] = (byte) (255 - (Loop - 85) * 255 / 41);
            pal.G[Loop] = (byte) 255;
            pal.B[Loop] = 0;
        }
        for (Loop = 127; Loop <= 169; ++Loop) {
            pal.R[Loop] = 0;
            pal.G[Loop] = (byte) (255 - (Loop - 127) * 255 / 42);
            pal.B[Loop] = (byte) ((Loop - 127) * 255 / 42);
        }
        for (Loop = 170; Loop <= 211; ++Loop) {
            pal.R[Loop] = 0;
            pal.G[Loop] = 0;
            pal.B[Loop] = (byte) (255 - (Loop - 170) * 128 / 41);
        }
        for (Loop = 212; Loop <= 245; ++Loop) {
            pal.R[Loop] = (byte) ((Loop - 212) * 120 / 32);
            pal.G[Loop] = 0;
            pal.B[Loop] = 127;
        }

        for (Loop = 246; Loop <= 255; ++Loop) {
            pal.R[Loop] = (byte) ((Loop - 246) * 255 / 9);
            pal.G[Loop] = (byte) ((Loop - 246) * 255 / 9);
            pal.B[Loop] = (byte) ((Loop - 246) * 255 / 9);
        }
        return pal;
    }

    public static Palette getGrayScalePalette() {
        final Palette pal = new Palette();
        int Loop;

        for (Loop = 0; Loop <= 255; ++Loop) {
            pal.R[Loop] = (byte) Loop;
            pal.G[Loop] = (byte) Loop;
            pal.B[Loop] = (byte) Loop;
        }
        return pal;
    }

    private final byte msvgab[] = { 0, 42, 0, 42, 0, 42, 0, 42, 21, 63, 21, 63, 21, 63, 21, 63, 0, 5, 8, 11, 14, 17, 20, 24, 28, 32, 36, 40, 45, 50, 56, 63, 63, 63,
            63, 63, 63, 47, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 31, 47, 63, 63, 63, 63, 63, 63, 63, 63, 63, 55, 47, 39, 31, 31, 31, 31, 31, 31, 31, 31, 31,
            39, 47, 55, 63, 63, 63, 63, 63, 63, 63, 63, 63, 58, 54, 49, 45, 45, 45, 45, 45, 45, 45, 45, 45, 49, 54, 58, 63, 63, 63, 63, 28, 28, 28, 28, 28, 21,
            14, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 14, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 21, 17, 14, 14, 14, 14, 14, 14, 14, 14, 14, 17, 21, 24, 28,
            28, 28, 28, 28, 28, 28, 28, 28, 26, 24, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 24, 26, 28, 28, 28, 28, 16, 16, 16, 16, 16, 12, 8, 4, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 12, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16, 16, 16, 16, 16, 16, 16, 16,
            16, 15, 13, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 15, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0 };

    private final byte msvgag[] = { 0, 0, 42, 42, 0, 0, 21, 42, 21, 21, 63, 63, 21, 21, 63, 63, 0, 5, 8, 11, 14, 17, 20, 24, 28, 32, 36, 40, 45, 50, 56, 63, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 16, 31, 47, 63, 63, 63, 63, 63, 63, 63, 63, 63, 47, 31, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 39, 47, 55, 63, 63, 63, 63, 63,
            63, 63, 63, 63, 55, 47, 39, 45, 45, 45, 45, 45, 45, 45, 45, 45, 49, 54, 58, 63, 63, 63, 63, 63, 63, 63, 63, 63, 58, 54, 49, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 7, 14, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 21, 14, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 17, 21, 24, 28, 28, 28, 28, 28, 28, 28, 28, 28,
            24, 21, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 24, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 24, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 12, 10, 11, 11, 11,
            11, 11, 11, 11, 11, 11, 12, 13, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0 };

    private final byte msvgar[] = { 0, 0, 0, 0, 42, 42, 42, 42, 21, 21, 21, 21, 63, 63, 63, 63, 0, 5, 8, 11, 14, 17, 20, 24, 28, 32, 36, 40, 45, 50, 56, 63, 0, 16,
            31, 47, 63, 63, 63, 63, 63, 63, 63, 63, 63, 47, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 31, 39, 47, 55, 63, 63, 63, 63, 63, 63, 63, 63, 63, 55, 47, 39, 31,
            31, 31, 31, 31, 31, 31, 31, 45, 49, 54, 58, 63, 63, 63, 63, 63, 63, 63, 63, 63, 58, 54, 49, 45, 45, 45, 45, 45, 45, 45, 45, 0, 7, 14, 21, 28, 28,
            28, 28, 28, 28, 28, 28, 28, 21, 14, 7, 0, 0, 0, 0, 0, 0, 0, 0, 14, 17, 21, 24, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 21, 17, 14, 14, 14, 14, 14,
            14, 14, 14, 20, 22, 24, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 24, 22, 20, 20, 20, 20, 20, 20, 20, 20, 0, 4, 8, 12, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 12, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 12, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 12, 10, 8, 8, 8, 8, 8, 8, 8, 8, 11, 12, 13,
            15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 13, 12, 11, 11, 11, 11, 11, 11, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0 };

}
